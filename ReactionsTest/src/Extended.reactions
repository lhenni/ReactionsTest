import java.util.List

import "http://tools.vitruv.tests.metamodels.allElementTypes" as minimal

// extends base, defines some additional reactions, overrides reactions and routines from base,
// makes use of transitively imported bommonFunctions, overrides routines from bommonFunctions
reactions: extended
in reaction to changes in AllElementTypes
execute actions in AllElementTypes

import base

routine doSth() {
	action {
		call {
			System.out.println("test");
			commonFunctions.func1("func1 called by Extended");
		}
	}
}

routine base::test3(plain List<String> as s) {
	action {
		call {
			System.out.println("overridden test3 with parameter " + s);
		}
	}
}

// additional reaction:
reaction AdditionalCreateRootTest {
	after element minimal::Root created and inserted as root
	call createRoot(newValue)
}

// overridden reaction:
reaction base::CreateRootTest {
	after element minimal::Root created and inserted as root
	call {
		createRoot(newValue)
		doSth // added
	}
}

// overridden routine:
routine base::createRoot(minimal::Root rootElement) {
	action {
		val newRoot = create minimal::Root and initialize {
			newRoot.id = rootElement.id;
		}
		add correspondence between newRoot and rootElement
		call {
			persistProjectRelative(rootElement, newRoot, "model/" + rootElement.id.replace("Source", "Target") + "." + rootElement.eResource.URI.fileExtension);
			doSth // added
		}
	}
}

routine base.commonFunctions::func3() {
	action {
		call {
		}
	}
}

// overridden transitive routine:
routine base.commonFunctions::func1(String string) {
	action {
		call {
			System.out.println("func1 overridden by Extended: " + string);
		}
	}
}

// importing other segment in same file
reactions: test
in reaction to changes in AllElementTypes
execute actions in AllElementTypes

import extended using qualified names

routine doSth() {
	action {
		call {
			System.out.println("test");
			extended.commonFunctions.func1("func1 called by Extended");
		}
	}
}